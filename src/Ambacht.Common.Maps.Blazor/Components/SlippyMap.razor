@using Ambacht.Common.Maps.Tiles
@using Ambacht.Common.Mathmatics
@using System.Reactive.Linq
@using Ambacht.Common.Blazor
@using Microsoft.Extensions.Logging
@inherits AmbachtComponentBase
@inject IGetSizeService GetSizeService

<div @ref="_container" class="map-container rounded-md"
     @onmousedown="OnMouseDown"
     @onmousemove="OnMouseMove"
     @onmouseup="OnMouseUp"
     @onmouseover="OnMouseOver"
     @onmouseout="OnMouseOut"
     @onmousewheel="OnMouseWheel"
     oncontextmenu="return false">
	@if (DebugView)
	{
		<div style="position: absolute; display: block; background: red; color: white; z-index: 999">
			@foreach (var line in _debugLog)
			{
				<div>@line</div>
			}
		</div>
	}
	<CascadingValue Value="_view">
		@ChildContent
	</CascadingValue>
</div>

<style>

  .map-container {
    position: relative;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    padding: 0px;
    margin: 0px;
    overflow-x: hidden;
    overflow-y: hidden;
  }

  .map-layer {
    position: absolute;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0; 
    padding: 0px;
    margin: 0px;
    overflow-x: hidden;
    overflow-y: hidden;
  }

</style>

@code {



	[Parameter()]
	public LatLng Center { get; set; }

	[Parameter()]
	public EventCallback<LatLng> CenterChanged { get; set; }

	[Parameter()]
	public double ZoomAmount { get; set; }

	[Parameter()]
	public EventCallback<double> ZoomAmountChanged { get; set; }

	[Parameter()]
	public EventCallback<SlippyMapView> OnViewChanged { get; set; }

	[Parameter()]
	public double Angle { get; set; }

	[Parameter()]
	public RenderFragment ChildContent { get; set; }

	[Parameter()]
	public string Class { get; set; }

	[Parameter()]
	public bool EnableMouseZoom { get; set; } = true;

	[Parameter()]
	public bool EnableMousePan { get; set; } = true;

	[Parameter()]
	public double MinZoom { get; set; } = 1;

	[Parameter()]
	public double MaxZoom { get; set; } = 21;

	[Parameter()]
	public Vector2? FixedSize { get; set; }

	[CascadingParameter()]
	public IObservable<WindowState> WindowStates { get; set; }

	[Parameter()]
	public bool DebugView { get; set; }

	private List<string> _debugLog = new ();
	private bool _over = false;


	/// <summary>
	/// Reference to the div container, used to retrieve the size
	/// </summary>
	private ElementReference _container;

	private SlippyMapView _view = new SlippyMapView()
	{
		Size = new Vector2<double>(600, 600),
		TileSize = TileSize
	};

	protected override void OnInitialized()
	{
		base.OnInitialized();
		if (WindowStates != null)
		{
			WindowStates.OnChangeUntilAsync((_, _) => HandleResize(), Disposed);
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		await HandleResize();
	}

	private async Task HandleResize()
	{
		var size = FixedSize ?? await GetSizeService.GetSizeAsync(_container);
		if (size.X <= 0 || size.Y <= 0)
		{
			return;
		}

		if (_lastSize != size)
		{
			_lastSize = size;
			_debugLog.Add($"Window size: {size}");
		}

		await SetView(_view with
			{
				Coords = Center,
				Zoom = ZoomAmount,
				AngleDegrees = Angle,
				Size = size.ToVector2D(),
			});
	}

	private Vector2 _lastSize = Vector2.Zero;


	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
		await SetView(_view with {
			Coords = Center,
			Zoom = ZoomAmount,
			AngleDegrees = Angle,
		});
	}

	private const int TileSize = 256;


	private async Task SetView(SlippyMapView newView)
	{
		if (newView.Size.X <= 0 || newView.Size.Y <= 0)
		{
			return;
		}

		if (_deferredFit != null)
		{
			// Do we have a size yet?
			var deferred = _deferredFit;
			_deferredFit = null;
			newView = newView.Fit(deferred, _deferredMargin);
		}
		if (_trackedFit != null)
		{
			newView = newView.Fit(_trackedFit, _trackedMargin);
		}
		if (_view.Equals(newView))
		{
			return;
		}

		_debugLog.Add($"New view: {newView}");

		var oldView = _view;
		_view = newView;

		if (oldView.Coords != newView.Coords)
		{
			Center = newView.Coords;
			await CenterChanged.InvokeAsync(Center);
		}

		if (oldView.Zoom != newView.Zoom)
		{
			ZoomAmount = newView.Zoom;
			await ZoomAmountChanged.InvokeAsync(ZoomAmount);
		}
		await OnViewChanged.InvokeAsync(_view);
		this.StateHasChanged();
	}

	#region panning state

	/// <summary>Pans the map</summary>
	/// <remarks>Offset are in component pixel space, which has the same scale as tile pixel space</remarks>
	public async Task Pan(Vector2<double> delta) => await SetView(_view.Pan(delta));

	private bool _dragging = false;
	private Vector2<double> _previous;

	private void OnMouseDown(MouseEventArgs args)
	{
		if (!EnableMousePan)
		{
			return;
		}
		if (args.Button == 0 && _over)
		{
			_dragging = true;
			_previous = new Vector2<double>(args.ClientX, args.ClientY);
		}
	}

	private void OnMouseUp(MouseEventArgs args)
	{
		if (args.Button == 0)
		{
			_dragging = false;
		}
	}

	private async Task OnMouseMove(MouseEventArgs args)
	{
		if (args.Button == 0)
		{
			if (_dragging && _over)
			{
				var current = new Vector2<double>(args.ClientX, args.ClientY);
				var delta = current - _previous;
				_previous = current;
				await Pan(delta);
			}
		}
	}

	private void OnMouseOver(MouseEventArgs args)
	{
		_over = true;
		_dragging = false;
	}

	private void OnMouseOut(MouseEventArgs args)
	{
		_over = false;
		_dragging = false;
	}

	#endregion

	#region Scrolling

	public async Task Zoom(double deltaLevels, Vector2<double> pos)
	{
		var newZoomAmount = (_view.Zoom + deltaLevels).Clamp(MinZoom, MaxZoom);
		var center = SlippyMath.LatLngToPixel(_view.Coords, _view.Zoom, TileSize);
		center -= _view.HalfSize;
		center += pos;
		await SetView(_view with
		{
			Coords = SlippyMath.PixelToLatLng(center, _view.Zoom, TileSize),
			Zoom = newZoomAmount
		});
	}


	double _amountLeft = 0;
	double _amountPerLevel = 100;

	private async Task OnMouseWheel(WheelEventArgs args)
	{
		if (!EnableMouseZoom)
		{
			return;
		}
		_amountLeft -= args.DeltaY;
		var levels = (int) (_amountLeft / _amountPerLevel);
		_amountLeft -= levels * _amountPerLevel;
		var current = new Vector2<double>(args.ClientX, args.ClientY);
		await Zoom(levels, current);
	}

	#endregion

	#region Fit

	public async Task Fit(Rectangle<double> bounds, Projection projection, float margin, bool keepTracking)
	{
		await Fit(new LatLngBounds(
			projection.Invert(bounds.TopLeft()),
			projection.Invert(bounds.BottomRight())), margin, keepTracking);
	}

	public async Task Fit(LatLngBounds bounds, float margin, bool keepTracking)
	{
		if (keepTracking)
		{
			_trackedFit = bounds;
			_trackedMargin = margin;
		}

		if (_view.Size.X <= 0 || _view.Size.Y <= 0)
		{
			_deferredFit = bounds;
			_deferredMargin = margin;
			return;
		}

		await SetView(_view.Fit(bounds, margin));
	}

	private LatLngBounds _deferredFit = null;
	private float _deferredMargin;

	private LatLngBounds _trackedFit = null;
	private float _trackedMargin;

	#endregion

}